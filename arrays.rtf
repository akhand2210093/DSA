{\rtf1}

#remove duplicate from sorted array
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int k=1,n=nums.size();
        for(int i=1;i<n;i++){
            if(nums[i]!=nums[i-1]){
                nums[k]=nums[i];
                k++;
            }
        }

        return k;
    
    }
};

#two sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> result;

        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if((nums[i]+nums[j])==target){
                    result.push_back(i);
                    result.push_back(j);
                }
            }
        }
        return result;
    }
};


#container with most water
class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        int i=0,j=n-1;
        int temp=0,result=0;
        while(i<j){
            temp = min(height[i],height[j])*(j-i);
            result=max(result,temp);
            if(height[i]<height[j]) i++;
            else j--;
        }
        return result;

    }
};

#rotate array
class Solution {
public:
    void rotate(vector<int>& nums, int k) { 
        int n=nums.size();
        k%=n;
        reverse(nums.begin() + n-k, nums.end());
              
        reverse(nums.begin(), nums.begin() + n-k); 
        
        reverse(nums.begin(), nums.end());
    }
};
